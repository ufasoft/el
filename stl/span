#pragma once
#define _SPAN_

namespace ExtSTL {
using std::byte;

const ptrdiff_t dynamic_extent = -1;

template <typename T>
class span {
	T* m_p;
	size_t m_size;
public:
    typedef T element_type;
    typedef T* pointer;
    typedef T& reference;
    typedef T* iterator;
    typedef const T* const_iterator;

    span() : m_p(0), m_size(0) {}
    span(T *p, size_t size) : m_p(p), m_size(size) {}
    span(T *p, T* q) : m_p(p), m_size(q - p) {}

    span(const span& s) : m_p(s.m_p), m_size(s.m_size) {}

    template <class C>
    span(const C& c) : m_p(std::data(c)), m_size(std::size(c)) {}

    span& operator=(const span& other) noexcept = default;

    pointer data() const noexcept { return m_p;  }
    size_t size() const noexcept { return m_size; }
    size_t size_bytes() const noexcept { return m_size * sizeof(T); }
    bool empty() const noexcept { return m_size == 0; }

    reference operator[](size_t idx) const { return m_p[idx]; }
    reference operator()(size_t idx) const { return operator[](idx); }

    iterator begin() const noexcept { return m_p; }
    const_iterator cbegin() const noexcept { return m_p; }
    iterator end() const noexcept { return m_p + m_size; }
    const_iterator cend() const noexcept { return m_p + m_size; }

    span first(size_t count) const { return span(m_p, count); }
    span last(size_t count) const { return span(m_p + (m_size - count), count); }

    span subspan(size_t offset, ptrdiff_t count = dynamic_extent) const {
        return span(m_p + offset, count == dynamic_extent ? m_size - offset : count);
    }
};

template <typename T>
span<const byte> as_bytes(const span<T>& s) noexcept { return span<const byte>((const byte*)s.data(), s.size_bytes()); }

template <typename T>
span<byte> as_writable_bytes(const span<T>& s) noexcept { return span<byte>((byte*)s.data(), s.size_bytes()); }

} // ExtSTL::

namespace std {
	using ExtSTL::span;
}

