/*######     Copyright (c) 1997-2013 Ufasoft  http://ufasoft.com  mailto:support@ufasoft.com,  Sergey Pavlov  mailto:dev@ufasoft.com #######################################
#                                                                                                                                                                          #
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation;  #
# either version 3, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the      #
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU #
# General Public License along with this program; If not, see <http://www.gnu.org/licenses/>                                                                               #
##########################################################################################################################################################################*/

#pragma once

namespace Ext {
class Thread;
template <> struct ptr_traits<Thread> {
	typedef Interlocked interlocked_policy;
};
} namespace ExtSTL {
using namespace Ext;

class thread : Ext::NonCopiable {
public:
	static unsigned int AFXAPI hardware_concurrency();

	class id {
public:
#if UCFG_USE_PTHREADS
		pthread_t m_tid;

		explicit id(pthread_t tid)
			:	m_tid(tid)
		{}
#elif UCFG_WDM
		PRKTHREAD m_tid;
#else
		Ext::UInt32 m_tid;
#endif
		id()
			:	m_tid()
		{}

		bool operator<(const id& v) const { return m_tid < v.m_tid; }

		bool operator==(const id& v) const {
#if UCFG_USE_PTHREADS
			return ::pthread_equal(m_tid, v.m_tid);
#else
			return m_tid == v.m_tid;
#endif
		}

		bool operator!=(const id& v) const { return !operator==(v); }
	};

	template <class F>
	explicit thread(F pfn) {
		struct MyThread : public Thread {
			F m_pfn;

			MyThread(F pfn)
				:	m_pfn(pfn)
			{}

			void Execute() override {
				m_pfn();
			}
		};
		Start(new MyThread(pfn));
	}

	template <class F, class A0>
	explicit thread(F pfn, A0 a0) {
		struct MyThread : public Thread {
			F m_pfn;
			A0 m_a0;

			MyThread(F pfn, A0 a0)
				:	m_pfn(pfn)
				,	m_a0(a0)
			{}

			void Execute() override {
				m_pfn(m_a0);
			}
		};
		Start(new MyThread(pfn, a0));
	}

	~thread();
	thread(EXT_RV_REF(thread) rv);
	thread& operator=(EXT_RV_REF(thread) rv);

	bool joinable() const { return m_t; }
	
	void join();
	void detach();
	void swap(thread& other);
private:
	ptr<Thread> m_t;

	void Start(Thread *t);
};

inline void swap(thread& x, thread& r) {
	x.swap(r);
}

#if !defined(_MSC_VER) || UCFG_MSC_VERSION >= 1700
EXT_API ostream& AFXAPI operator<<(ostream& os, const thread::id& v);
#endif

namespace this_thread {
	
thread::id AFXAPI get_id();

} // this_thread::

} // ExtSTL::

