/*######   Copyright (c) 2012-2019 Ufasoft  http://ufasoft.com  mailto:support@ufasoft.com,  Sergey Pavlov  mailto:dev@ufasoft.com ####
#                                                                                                                                     #
# 		See LICENSE for licensing information                                                                                         #
#####################################################################################################################################*/

#pragma once
#define _DYNAMIC_BITSET_

#include EXT_HEADER(vector)

namespace Ext {
	int __cdecl PopCount(uint32_t v);
	int __cdecl PopCount(uint64_t v);
}

namespace ExtSTL {

class dynamic_bitsetBase {
public:
	typedef size_t size_type;
protected:
	size_type m_size;
public:
	static const size_type npos = size_type(-1);

	class reference {
		dynamic_bitsetBase& m_bs;
		size_t m_pos;

		reference(dynamic_bitsetBase& bs, size_t pos)
			: m_bs(bs)
			, m_pos(pos)
		{}

		reference& operator=(bool val) {
			m_bs.replace(m_pos, val);
			return *this;
		}
	};

	dynamic_bitsetBase(size_type size)
		: m_size(size)
	{}

	size_type size() const { return m_size; }
	bool empty() const { return size() == 0; }

	void replace(size_type pos, bool val);
	void flip(size_type pos);
	void reset(size_type pos);

	virtual void resize(size_t siz) =0;
	
	void push_back(bool val) {
		resize(size()+1);
		replace(size()-1, val);
	}

	void clear() { resize(0); }
protected:
	virtual uint8_t& ByteRef(size_t pos) const =0;
};

template <typename T = unsigned long long>
class dynamic_bitset : public dynamic_bitsetBase {
	typedef dynamic_bitsetBase base;
public:
	typedef T block_type;
	typedef size_t block_width_type;
    
	static const block_width_type bits_per_block = sizeof(block_type)*8;

	std::vector<block_type> m_data;

	dynamic_bitset(size_t size = 0)
		: base(size)
		, m_data((size+bits_per_block-1)/bits_per_block)
	{}

	dynamic_bitset(const dynamic_bitset& bs)
		: base(bs.m_size)
		, m_data(bs.m_data)
	{}

	dynamic_bitset(EXT_RV_REF(dynamic_bitset) rv)
		: base(rv.m_size)
		, m_data(static_cast<EXT_RV_REF(std::vector<block_type>)>(rv.m_data))
	{}

	size_type num_blocks() const { return m_data.size(); }

	size_type max_size() const { return (std::min)(m_data.max_size()*bits_per_block, (std::numeric_limits<size_type>::max)()); }

	size_type count() const {
		size_type r = 0;
		EXT_FOR (block_type b, m_data) {
			r += Ext::PopCount(b);
		}
		return r;
	}

	bool operator==(const dynamic_bitset& bs) const {
		return size()==bs.size() && m_data==bs.m_data;
	}

	void swap(dynamic_bitset& x) {
		m_data.swap(x.m_data);
		std::swap(m_size, x.m_size);
	}

	block_type *data() { return &m_data[0]; }

	dynamic_bitset& operator=(EXT_RV_REF(dynamic_bitset) rv) {
		swap(rv);
		return *this;
	}

	void reserve(size_t siz) {
		m_data.reserve((siz + bits_per_block - 1) / bits_per_block);
	}

	void resize(size_t siz) override {
		m_data.resize(((m_size = siz) + bits_per_block - 1) / bits_per_block);
		ClearLastBits();
	}

	bool test(size_type pos) const {
		return ByteRefInline(pos) & uint8_t(1 << (pos & 7));
	}

	bool contains(size_type pos) const { return pos < size() && test(pos); }		// pos may be >= size()
	
	bool operator[](size_type pos) const { return test(pos); }

	void set(size_type pos) {
		ByteRefInline(pos) |= 1 << (pos & 7);
	}

	void set() {
		std::fill(m_data.begin(), m_data.end(), block_type(-1));
		ClearLastBits();
	}

	using base::reset;
	void reset() {
		std::fill(m_data.begin(), m_data.end(), block_type(0));
	}

	dynamic_bitset operator~() const {
		dynamic_bitset r = *this;
		for (size_t i=0; i<m_data.size(); ++i)
			r.m_data[i] = ~r.m_data[i];
		r.ClearLastBits();
		return r;
	}

	dynamic_bitset& operator&=(const dynamic_bitset& bs) {
		size_t m = std::min(m_data.size(), bs.m_data.size());
		for (size_t i=0; i<m; ++i)
			m_data[i] &= bs.m_data[i];
		std::fill(m_data.begin()+m, m_data.end(), block_type(0));
		return *this;
	}

	dynamic_bitset& operator|=(const dynamic_bitset& bs) {
		size_t m = std::min(m_data.size(), bs.m_data.size());
		for (size_t i=0; i<m; ++i)
			m_data[i] |= bs.m_data[i];
		ClearLastBits();
		return *this;
	}

	void Or(const dynamic_bitset& bs, ssize_t offset) {
		if (offset % bits_per_block)
			Ext::ThrowImp(E_NOTIMPL);
		else {
			ssize_t blockOffset = offset / ssize_t(bits_per_block);
			for (int i=0; i<bs.m_data.size(); ++i) {
				ssize_t place = i + blockOffset;
				if (place>=0 && place<m_data.size())
					m_data[place] |= bs.m_data[i];
			}
		}
	}

	dynamic_bitset& operator^=(const dynamic_bitset& bs) {
		size_t m = std::min(m_data.size(), bs.m_data.size());
		for (size_t i=0; i<m; ++i)
			m_data[i] ^= bs.m_data[i];
		ClearLastBits();
		return *this;
	}
private:
	inline uint8_t& ByteRefInline(size_t pos) const {
		return *((uint8_t*)&m_data[0] + (pos >> 3));
	}

	uint8_t& ByteRef(size_t pos) const override {
		ASSERT(pos < size());
		return *((uint8_t*)&m_data[0] + (pos >> 3));
	}

	void ClearLastBits() {
		if (int bits = m_size % bits_per_block)		
			m_data.back() &= (block_type(1) << bits) - 1;
	}
};

template <typename T>
dynamic_bitset<T> operator&(const dynamic_bitset<T>& a, const dynamic_bitset<T>& b) {
	dynamic_bitset<T> r = a;
	return r &= b;
}

template <typename T>
dynamic_bitset<T> operator|(const dynamic_bitset<T>& a, const dynamic_bitset<T>& b) {
	dynamic_bitset<T> r = a;
	return r |= b;
}

template <typename T>
dynamic_bitset<T> operator^(const dynamic_bitset<T>& a, const dynamic_bitset<T>& b) {
	dynamic_bitset<T> r = a;
	return r ^= b;
}

template <typename T, typename I>
void to_block_range(const dynamic_bitset<T>& bs, I it) {
	std::copy(bs.m_data.begin(), bs.m_data.end(), it);
}


} // ExtSTL::

namespace std {
using ExtSTL::dynamic_bitset;
using ExtSTL::to_block_range;
}

namespace Ext {
uint64_t ToUInt64AtBytePos(const std::dynamic_bitset<uint8_t>& bs, size_t pos);
}


