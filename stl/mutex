/*######   Copyright (c) 2013-2019 Ufasoft  http://ufasoft.com  mailto:support@ufasoft.com,  Sergey Pavlov  mailto:dev@ufasoft.com ####
#                                                                                                                                     #
# 		See LICENSE for licensing information                                                                                         #
#####################################################################################################################################*/

#pragma once

#define _MUTEX_

namespace ExtSTL {	

#if UCFG_WIN32
	typedef Ext::CNonRecursiveCriticalSection mutex;
#else
	typedef Ext::CCriticalSection mutex;
#endif

#ifdef UCFG_WIN32
typedef Ext::CCriticalSection recursive_mutex;
#endif

extern EXT_DATA const struct adopt_lock_t {} adopt_lock;
extern EXT_DATA const struct defer_lock_t {} defer_lock;
extern EXT_DATA const struct try_to_lock_t {} try_to_lock;

template <class M>
class lock_guard : public Ext::noncopyable {
	typedef lock_guard class_type;
public:
	typedef M mutex_type;
private:
	mutex_type& m_mtx;
public:
	explicit lock_guard(mutex_type& mtx)
		: m_mtx(mtx)
	{
		m_mtx.lock();
	}

	lock_guard(mutex_type& mtx, adopt_lock_t)
		: m_mtx(mtx)
	{
	}

	~lock_guard() {
		m_mtx.unlock();
	}
};

template <class M>
class unique_lock : public Ext::noncopyable {
	typedef unique_lock class_type;
public:
	typedef M mutex_type;
private:
	mutex_type* m_pm;
	bool m_owns;
public:
	unique_lock()
		: m_pm(0)
		, m_owns(false)
	{}

	unique_lock(EXT_RV_REF(unique_lock) rv)
		: m_pm(exchange(rv.m_pm, nullptr))
		, m_owns(exchange(rv.m_owns, false))
	{		
	}

	explicit unique_lock(mutex_type& m)
		: m_pm(&m)
		, m_owns(true)
	{
		m_pm->lock();
	}

	unique_lock(mutex_type& m, adopt_lock_t)
		: m_pm(&m)
		, m_owns(true)
	{}

	unique_lock(mutex_type& m, defer_lock_t)
		: m_pm(&m)
		, m_owns(false)
	{}

	unique_lock(mutex_type& m, try_to_lock_t)
		: m_pm(&m)
		, m_owns(m.try_lock())
	{}

	~unique_lock() {
		if (m_owns)
			m_pm->unlock();
	}

	unique_lock& operator=(EXT_RV_REF(unique_lock) rv) {
		if (this != &rv) {
			if (m_owns)
				m_pm->unlock();
			m_pm = exchange(rv.m_pm, nullptr);
			m_owns = exchange(rv.m_owns, false);
		}
		return *this;	
	}

	mutex_type *mutex() const { return m_pm; }
	bool owns_lock() const { return m_owns; }
	EXPLICIT_OPERATOR_BOOL() const { return m_owns ? EXT_CONVERTIBLE_TO_TRUE : 0; }

	void swap(unique_lock& u) {
		std::swap(m_pm, u.m_pm);
		std::swap(m_owns, u.m_owns);
	}

	mutex_type *release() {
		m_owns = false;
		return exchange(m_pm, nullptr);
	}

	void lock() {
		if (!m_pm)
			throw system_error(make_error_code(errc::operation_not_permitted));
		m_pm->lock();
		m_owns = true;
	}

	bool try_lock() {
		if (!m_pm)
			throw system_error(make_error_code(errc::operation_not_permitted));
		if (m_owns)
			throw system_error(make_error_code(errc::resource_deadlock_would_occur));
		return m_owns = m_pm->try_lock();
	}

	void unlock() {
		m_owns = false;
		m_pm->unlock();
	}
};

template <class T>
inline void swap(unique_lock<T>& x, unique_lock<T>& y) {
	x.swap(y);
}

struct OnceBase {
	virtual void Call() const =0;
};
#define EXT_ONCE_BASE_DEFINED

class once_flag : Ext::noncopyable {
public:
	volatile int32_t m_flag;
#if UCFG_WIN32_FULL
	INIT_ONCE m_initOnce;
#endif

	once_flag();
};


void AFXAPI CallOnceImp(once_flag& onceFlag, OnceBase& onceBase);

template <class T>
struct OnceTarget : OnceBase {
	T *m_p;

	OnceTarget(T& t)
		:	m_p(&t)
	{}

	void Call() const override {
		(*m_p)();
	}
};

template<class _Target> inline
void _Call_it(once_flag& _Flag, _Target _Tgt) {	// create call data object and make protected call
		OnceTarget<_Target> _Once_data(_Tgt);
		CallOnceImp(_Flag, _Once_data);
}


#	if UCFG_MSC_VERSION >= 1700 && UCFG_MSC_VERSION < 1800

    #define _CALL_ONCE( \
    	TEMPLATE_LIST, PADDING_LIST, LIST, COMMA, X1, X2, X3, X4) \
    template<class _Fn COMMA LIST(_CLASS_TYPE)> inline \
    	void call_once(once_flag& _Flag, _Fn&& _Fx COMMA LIST(_TYPE_REFREF_ARG)) \
    	{	/* call _Fx(_Ax...) once */ \
    	if (!_Flag.m_flag)				\
    		_Call_it(_Flag, \
    			_STD bind(_Decay_copy(_STD forward<_Fn>(_Fx)) \
    				COMMA LIST(_DECAY_COPY_FORWARD_ARG))); \
    	}

		_VARIADIC_EXPAND_0X(_CALL_ONCE, , , , )
#	else
		template <class F>
		void call_once(once_flag& _Flag, F _Fx) {
			if (!_Flag.m_flag)
				_Call_it(_Flag, _Fx);
		}
#	endif	// UCFG_MSC_VERSION >= 1700
#undef _CALL_ONCE



} // ExtSTL::

